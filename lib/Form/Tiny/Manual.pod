=pod

=head1 NAME

Form::Tiny::Manual - reference for working with Form::Tiny

=head1 SYNOPSIS

	# first ...
	package SomeForm;

	use Form::Tiny;
	use Types::Common::String qw(SimpleStr);
	use Types::Common::Numeric qw(PositiveInt);

	form_field 'name' => (
		type => SimpleStr,
		adjust => sub { ucfirst shift },
		required => 1,
	);

	form_field 'lucky_number' => (
		type => PositiveInt,
		required => 1,
	);

	form_hook cleanup => sub {
		my ($self, $data) = @_;

		$self->add_error('Perl6 is now Raku')
			if $data->{name} eq "Perl"
			&& $data->{lucky_number} == 6;
	};

	# then ...

	use Data::Dumper;
	my $form = SomeForm->new;

	$form->set_input({
		name => 'perl',
		lucky_number => 6,
	});

	if ($input->valid) {
		print Dumper $form->fields;
	}
	else {
		print Dumper $form->errors;
	}

=head1 DESCRIPTION

L<Form::Tiny> is a form validation engine that can use all the type constraints you're already familiar with. The module does not ship with any field definitions on its own, instead it provides tools to reuse any type constraints from L<Type::Tiny> and other similar systems.

=head2 Policy

L<Form::Tiny> is designed to be a comprehensive data validation and filtering system based on existing validation solutions. Type::Tiny libraries cover most of the validation and coercion needs in models, and now with Form::Tiny they can be empowered to do the same with input data.

The module itself isn't much more than a hashref filter - it accepts one as input and returns the transformed one as output. The pipeline is as follows:

	input
	  |
	  |--> filtering -- coercion -- validation -- adjustment -- cleanup --|
	                                                                      v
	                                                                    output

I<(Note that not every step on that pipeline is ran every time - it depends on form configuration)>

The module always tries to get as much data from input as possible and copy that into output. B<It will never copy any data that is not explicitly specified in the form fields configuration>.

=head2 Moose-like form domain-specific language

Form::Tiny allows you to define forms much like you would define a Moose class. The syntax is showcased below:

	use Form::Tiny -filtered;
	use Types::Standard qw(Enum Str);

	form_trim_strings;

	form_field 'url' => (
		type => Str,
		required => 1,
	);

	form_field 'action' => (
		type => Enum[qw(GET POST PUT DELETE)],
		default => sub { 'GET' },
	);

	form_hook cleanup => sub {
		my ($self, $data) = @_;
		... # perform cleaning
	};

Adding a C<use Form::Tiny> line will cause your current package to be turned into a form by composing L<Form::Tiny::Form> into it (and as a result, merging all of its symbols with your package). It also imports Moo into your namespace for convenience (unless you specify C<-nomoo> flag). Refer to L<Form::Tiny/"Available import flags"> for a full list of available flags.

This syntax is designed to resemble and mix in nicely with Moo/se syntax. Form fields and class properties are completely separate and can be freely intermixed with each other.

=head2 Basic usage

Input can be passed as a scalar to the constructor or with the I<set_input> method. Every call to that method will cause the form instance to be cleared of old errors and fields, so that it can be used again for different data.

	use MyForm;

	# either ...
	my $form = MyForm->new(input => $data);

	# or ...
	my $form = MyForm->new;
	$form->set_input($data);

With input in place, a I<valid> method can be called, which will return a validation result and fill in the I<errors> and I<fields> properties. These properties are mutually exclusive: errors are only present if the validation is unsuccessful, otherwise the fields are present.

The example below illustrates how a form class could be used to validate data.

	use MyForm;

	my $form = MyForm->new;
	$form->set_input($some_input);

	if ($form->valid) {
		my $fields = $form->fields; # a hash reference
		...
	} else {
		my $errors = $form->errors; # an array reference
		...
	}

=head2 Form building

You can use I<form_field> function to declare form fields, just like you would use I<has> to declare class properties in Moo/se.

Each of field definitions will be coerced into an object of the L<Form::Tiny::FieldDefinition> class.

	form_field 'some_name';
	form_field 'another_name' => (
		required => 'soft',
	);

	form_field sub {
		my ($self) = @_;

		return {
			name => 'complex_field',
			required => 1,
			adjust => sub { $self->some_method(shift) },
		};
	};

The only required element in hashes defining the fields is the key I<name>, which contains the string with name of the field in the form input. In the most basic style of I<form_field>, the name B<should not> be given explicitly, as it will be automatically overwritten by the first argument to that function. Other possible elements are:

=over

=item type

The type that the field will be validated against. Effectively, this needs to be an object with C<validate> and C<check> methods implemented. All types from Type::Tiny type libraries, as well as all Form::Tiny forms meet this criteria.

=item coerce

A coercion that will be made B<before> the type is validated and will change the value of the field. This can be a coderef or a boolean:

Value of I<1> means that coercion will be applied from the specified I<type>. This requires the type to also provide I<coerce> and I<has_coercion> method, and the return value of the second one must be true.

Value of I<0> means no coercion will be made. This is the default behavior.

Value that is a coderef will be passed a single scalar, which is the value of the field. It is required to make its own checks and return a scalar which will replace the old value.

=item adjust

An adjustment that will be made B<after> the type is validated and the validation is successful. This must be a coderef that gets passed the validated value and returns the new value for the field (just like the coderef version of coercion).

At the point of adjustment, you can be sure that the value passed to the coderef meets the type constraint specified. It's probably a good idea to provide a type along with the adjustment to avoid unnecessary checks in the subroutine - if no type is specified, then any value from the input data will end up in the coderef.

=item required

Controls if the field should be skipped silently if it has no value or the value is empty. Possible values are:

I<0> - The field can be non-existent in the input, empty or undefined. This is the default behavior

I<"soft"> - The field has to exist in the input, but can be empty or undefined

I<1> or I<"hard"> - The field has to exist in the input, must be defined and non-empty (a value I<0> is allowed, but an empty string is disallowed)

=item default

A coderef, which should return a scalar value that will be used in place of a non-existent input value. If the field is marked as hard-required as well, the default value will also replace undefined or empty values.

The default value needs to be in line with the type check for the field, if it is specified. It also does not support nested arrays, like I<array.*>. An exception will be thrown if these conditions are not met.

=item message

A static string that should be output instead of an error message returned by the I<type> when the validation fails.

=item data

While building your form fields, it's possible to save some extra data along with each field. This data can be used to prompt the user what to input, insert some HTML generation objects or store hints on how to fill the field properly.

	use Types::Common::String qw(NonEmptySimpleStr);

	form_field "first name" => (
		type => NonEmptySimpleStr,
		data => {
			element => "input",
			properties => {
				type => "text",
			},
		},
	);

The data field can hold any value you want and later retrieved with an instantiated form object:

	for my $definition (@{$form->field_defs}) {
		say "field: " . $definition->name;
		say "data: " . Dumper($definition->data);
	}

=back

=head2 Hooks

	form_hook HOOK_NAME => $coderef;

Hooks are the way to introduce more behavior to the form, not achievable with single field validation. Each type of hook can have multiple code references assigned to it, and they will fire in the order of declaration.

Each hook type defines its own set of parameters that get passed to the C<$coderef>. Most hooks require you to return they last parameter that got passed and you're free to change it however you like. If a hook does not require you to return the value, the return value is discarded.

Hook types are listed below:

=head3 cleanup

While regular properties allow for single-field validation, sometimes a need arises to check if some fields are synchronized correctly, or even to perform some more complex validation. This can be done with the C<cleaup> hook, which will be only fired once after the validation for every individual field was successful. The cleaner subroutine should look like this:

	sub {
		my ($self, $data) = @_;

		# do something with $data
		# call $self->add_error if necessary
	};

A subroutine like the one above should either be specified in a I<form_hook> or in a I<form_cleaner> shortcut.

	# either ...
	form_hook cleanup => sub { ... };

	# or ...
	form_cleaner sub { ... };

Cleaning sub is also allowed to change C<$data>, which is a hash reference to the running copy of the input. Note that this is the final step in the validation process, so anything that is in $data after the cleanup will be available in the form's I<fields> after validation. The hook coderef need not to return the C<$data>, as it is a hash reference and will be updated just by changing it.

=head3 before_mangle

B<before_mangle> is fired for every field, just before it is changed ("mangled"). In addition to an object reference, this method will be passed the definition of the field (L<Form::Tiny::FieldDefinition>) and a scalar value of the field. The field must exist in the input data for this method to fire, but can be undefined. The return value of this method will become the new value for the field.

	form_hook before_mangle => sub {
		my ($self, $field_definition, $value) = @_;

		# do something with $value

		# don't forget to return!
		return $value;
	};

=head3 before_validate

B<before_validate> is fired just once for the form, before any field is validated. It is passed a single hashref - a copy of the input data. This method is free to do anything with the input, and its return value will become the real input to the validation.

	form_hook before_validate => sub {
		my ($self, $input_data) = @_;

		# do something with $input_data

		# don't forget to return!
		return $input_data;
	};

=head3 after_validate

Same as C<cleanup>, but differs in two aspects:

=over

=item * it is ran before C<cleanup>

=item * it is ran regardless of previous validation being successful or not

=back

This hook does not require you to return anything and is passed the same data as C<cleanup>.

=head2 Optional behavior

The module provides optional predefined behaviors which can be enabled with an import flag.

=head3 Strict mode

Turned on with the C<-strict> flag in L<Form::Tiny>.

Enables strict mode for the form. Validation will fail if form input contains any data not specified in the field definitions. This additional check is added to the form as a C<before_validate> hook.

Strict mode is helpful when you want to make sure you're not getting any extra data in your input. It does not affect the output of forms, only the validation result. Form::Tiny does not copy fields that are not declared explicitly to output regardless of the strict mode being turned on.

For example, if your form contains many optional fields which change often, you may want to ensure that your users are not sending anything you're not going to handle. This can help debugging and prevent errors.

=head3 Filters

Turned on with the C<-filtered> flag in L<Form::Tiny>.

Enables initial filtering for the input fields. This behavior is added to the form as a C<before_mangle> hook.

The filtering system performs a type check on field values and only apply a filtering subroutine when the type matches. This is done before the validation, and so can affect the validation result. An example filter that turns integers into their absolute values:

	form_filter Int, sub { abs shift() };

One special keyword exists for string trimming using the filters system:

	form_trim_strings;

=head2 Inline forms

The module enables a way to create a form without the need of a dedicated package. This is done with the L<Form::Tiny::Inline> class. This requires the user to pass all the data to the constructor, as shown in the example:

	my $form = Form::Tiny::Inline          #     An inline form ...
	           ->is(qw/strict filtered/)   # ... with the strict mode and filters enabled ...
	           ->new(                      # ... will be created with properties:
		field_defs => [{name => "my_field"}],
		cleaner => sub { ... },
	);

The possible constructor arguments are C<field_defs> (aref of hashrefs), C<filters> (aref of arefs, only when C<filtered>) and C<cleaner> (coderef). The same syntax as for regular helpers will work.

There's no way to define custom hooks (other than a single C<cleaner>) in inline forms. Additionally, a special case exists for the C<filtered> inline forms, as they will act as if you declared C<form_trim_strings> in their classes.

=head2 Advanced topics

=head3 Nesting

A dot (I<.>) can be used in the name of a field to express hashref nesting. A field with C<< name => "a.b.c" >> will be expected to be found under the key "c", in the hashref under the key "b", in the hashref under the key "a", in the root input hashref.

This is the default behavior of a dot in a field name, so if what you want is the actual dot it has to be preceded with a literal backslash (I<\.>, which is C<'\\.'> in a string). Additionally, having a literal backslash in field name requires you to escape it as well (I<\\>, which is C<'\\\\'> in a string).

=head3 Nested arrays

Nesting adds many new options, but in the example above we're only talking about hashes. Regular arrays can of course be handled by I<ArrayRef> type from Type::Tiny, but that's a hassle and makes it impossible to have any deeper structure defined in a name. Instead, you can use a star (I<*>) as the only element inside the nesting segment to expect an array there. Adding named fields can be resumed after that, but needn't.

For example, C<< name => "arr.*.some_key" >> expects I<arr> to be an array reference, with each element being a hash reference containing a key I<some_key>. Note that any array element that fails to contain wanted hash elements B<will cause the field to be ignored in the output> (since input does not meet the specification entirely). If you want the validation to fail instead, you need to make the nested element required.

	# This input data ...
	{
		arr => [
			{ some_key => 1 },
			{ some_other_key => 2 },
			{ some_key => 3 },
		]
	}

	# Would not get copied into output and ignored,
	# because the second element does not meet the specification.
	# Make the element required to make the validation fail instead

Other example is two nested arrays that not necessarily contain a hash at the end: C<< name => "arr.*.*" >>. The leaf values here can be simple scalars.

If you want a hash name consisted of star character C<*> alone, you can prepend it with a literal backslash, much like the nesting operator: I<\*>, which in perl string must be written as C<'\\*'>

=head3 Nested forms

Every form class created with I<Form::Tiny> is a consumer of L<Form::Tiny::Form> role, and can be used as a field definition type in other form. The outer and inner forms will validate independently, but inner form errors will be added to outer form with the outer field name prepended.

	# in Form2
	# everything under "nested" key will be validated using Form1 instance
	# every error for "nested" will also start with "nested"
	form_field "nested" => (
		type => Form1->new,
	);

Be aware of a special case, an adjustment will be inserted here automatically like the following:

	adjust => sub { $instance->fields }

this will make sure that any coercions and adjustments made in the nested form will be added to the outer form as well. If you want to specify your own adjustment here, make sure to use the data provided by the I<fields> method of the nested form.

=head3 Mixing form fields with class fields

It is possible and often very helpful to have both form and class fields inside the same form class:

	use Form::Tiny;
	use Types::Standard qw(Str);

	has 'user' => (
		is => 'rw',
	);

	form_field 'username' => (
		type => Str,
		required => 1,
	);

	form_field 'password' => (
		type => Str,
		required => 1,
	);

	form_cleaner sub {
		my ($self, $data) = @_;

		# load user from the storage service using $data->{username}
		my $user = ...;
		if ($user->validate_password($data->{password})) {
			# set the user for the class, will be available after validation
			$self->user($user);
		}
		else {
			$self->add_error(password => 'invalid password');
		}
	};

While doing so, make sure not to override any of the Form::Tiny::Form symbols (Moo / Moose should complain about it when it happens).

=head3 Form inheritance

It is possible form Form::Tiny forms to inherit from one another, but the feature is experimental (meaning it does work, but is not tested enough and may not work properly for certain configurations).

	# ParentForm.pm
	package ParentForm;

	use Form::Tiny;

	form_field 'inherited_field';

	1;

	# ChildForm.pm
	package ChildForm;

	use Form::Tiny;

	# regular 'extends' from Moo
	extends 'ParentForm';

	# should now have 'inherited_field' and any fields defined below:

	...

	1;

For best results, class parents should be specified before any calls to Form::Tiny DSL have been made.

=head1 SEE ALSO

=over

=item * L<Type::Tiny>, the awesome type system

=item * L<Form::Tiny>, the importer and base class for this distribution

=back
